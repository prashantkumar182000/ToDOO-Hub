[{"/home/user/Fast Biz/Dashboard/Todo-Hub/src/index.js":"1","/home/user/Fast Biz/Dashboard/Todo-Hub/src/App.js":"2","/home/user/Fast Biz/Dashboard/Todo-Hub/src/redux/store.js":"3","/home/user/Fast Biz/Dashboard/Todo-Hub/src/redux/boardsSlice.js":"4","/home/user/Fast Biz/Dashboard/Todo-Hub/src/components/Header.js":"5","/home/user/Fast Biz/Dashboard/Todo-Hub/src/components/Home.js":"6","/home/user/Fast Biz/Dashboard/Todo-Hub/src/components/EmptyBoard.js":"7","/home/user/Fast Biz/Dashboard/Todo-Hub/src/components/ElipsisMenu.js":"8","/home/user/Fast Biz/Dashboard/Todo-Hub/src/components/Column.js":"9","/home/user/Fast Biz/Dashboard/Todo-Hub/src/components/HeaderDropDown.js":"10","/home/user/Fast Biz/Dashboard/Todo-Hub/src/components/Sidebar.js":"11","/home/user/Fast Biz/Dashboard/Todo-Hub/src/modals/AddEditTaskModal.js":"12","/home/user/Fast Biz/Dashboard/Todo-Hub/src/modals/DeleteModal.js":"13","/home/user/Fast Biz/Dashboard/Todo-Hub/src/components/Task.js":"14","/home/user/Fast Biz/Dashboard/Todo-Hub/src/hooks/useDarkMode.js":"15","/home/user/Fast Biz/Dashboard/Todo-Hub/src/modals/TaskModal.js":"16","/home/user/Fast Biz/Dashboard/Todo-Hub/src/components/Subtask.js":"17"},{"size":379,"mtime":1682352056000,"results":"18","hashOfConfig":"19"},{"size":1127,"mtime":1709308657974,"results":"20","hashOfConfig":"19"},{"size":235,"mtime":1709303302560,"results":"21","hashOfConfig":"19"},{"size":4155,"mtime":1719321071218,"results":"22","hashOfConfig":"19"},{"size":3911,"mtime":1719321702983,"results":"23","hashOfConfig":"19"},{"size":1781,"mtime":1719322156923,"results":"24","hashOfConfig":"19"},{"size":0,"mtime":1719322033599,"results":"25","hashOfConfig":"19"},{"size":899,"mtime":1719322319432,"results":"26","hashOfConfig":"19"},{"size":1678,"mtime":1682352056000,"results":"27","hashOfConfig":"19"},{"size":2940,"mtime":1719320831786,"results":"28","hashOfConfig":"19"},{"size":4750,"mtime":1719320801822,"results":"29","hashOfConfig":"19"},{"size":7354,"mtime":1713958635267,"results":"30","hashOfConfig":"19"},{"size":2125,"mtime":1711973387979,"results":"31","hashOfConfig":"19"},{"size":1622,"mtime":1711976328005,"results":"32","hashOfConfig":"19"},{"size":468,"mtime":1682352056000,"results":"33","hashOfConfig":"19"},{"size":4967,"mtime":1713958366955,"results":"34","hashOfConfig":"19"},{"size":1183,"mtime":1682352056000,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"19vcy9a",{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/user/Fast Biz/Dashboard/Todo-Hub/src/index.js",[],[],"/home/user/Fast Biz/Dashboard/Todo-Hub/src/App.js",[],[],"/home/user/Fast Biz/Dashboard/Todo-Hub/src/redux/store.js",[],[],"/home/user/Fast Biz/Dashboard/Todo-Hub/src/redux/boardsSlice.js",[],[],"/home/user/Fast Biz/Dashboard/Todo-Hub/src/components/Header.js",[],[],"/home/user/Fast Biz/Dashboard/Todo-Hub/src/components/Home.js",[],[],"/home/user/Fast Biz/Dashboard/Todo-Hub/src/components/EmptyBoard.js",[],[],"/home/user/Fast Biz/Dashboard/Todo-Hub/src/components/ElipsisMenu.js",[],[],"/home/user/Fast Biz/Dashboard/Todo-Hub/src/components/Column.js",["90"],[],"import { shuffle } from \"lodash\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport boardsSlice from \"../redux/boardsSlice\";\nimport Task from \"./Task\";\n\nfunction Column({ colIndex }) {\n  const colors = [\n    \"bg-red-500\",\n    \"bg-orange-500\",\n    \"bg-blue-500\",\n    \"bg-purple-500\",\n    \"bg-green-500\",\n    \"bg-indigo-500\",\n    \"bg-yellow-500\",\n    \"bg-pink-500\",\n    \"bg-sky-500\",\n  ];\n\n  \n\n  const dispatch = useDispatch();\n  const [color, setColor] = useState(null)\n  const boards = useSelector((state) => state.boards);\n  const board = boards.find((board) => board.isActive === true);\n  const col = board.columns.find((col, i) => i === colIndex);\n  useEffect(() => {\n    setColor(shuffle(colors).pop())\n  }, [dispatch]);\n\n\n\n  const handleOnDrop = (e) => {\n    const { prevColIndex, taskIndex } = JSON.parse(\n      e.dataTransfer.getData(\"text\")\n    );\n\n    if (colIndex !== prevColIndex) {\n      dispatch(\n        boardsSlice.actions.dragTask({ colIndex, prevColIndex, taskIndex })\n      );\n    }\n  };\n\n  const handleOnDragOver = (e) => {\n    e.preventDefault();\n  };\n\n  return (\n    <div\n      onDrop={handleOnDrop}\n      onDragOver={handleOnDragOver}\n      className=\"scrollbar-hide   mx-5 pt-[90px] min-w-[280px] \"\n    >\n      <p className=\" font-semibold flex  items-center  gap-2 tracking-widest md:tracking-[.2em] text-[#828fa3]\">\n        <div className={`rounded-full w-4 h-4 ${color} `} />\n        {col.name} ({col.tasks.length})\n      </p>\n\n      {col.tasks.map((task, index) => (\n        <Task key={index} taskIndex={index} colIndex={colIndex} />\n      ))}\n    </div>\n  );\n}\n\nexport default Column;\n","/home/user/Fast Biz/Dashboard/Todo-Hub/src/components/HeaderDropDown.js",["91","92"],[],"/home/user/Fast Biz/Dashboard/Todo-Hub/src/components/Sidebar.js",["93","94","95","96"],[],"/home/user/Fast Biz/Dashboard/Todo-Hub/src/modals/AddEditTaskModal.js",["97","98"],[],"import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport crossIcon from \"../assets/icon-cross.svg\";\nimport boardsSlice from \"../redux/boardsSlice\";\n\nfunction AddEditTaskModal({\n  type,\n  device,\n  setIsTaskModalOpen,\n  setIsAddTaskModalOpen,\n  taskIndex,\n  prevColIndex = 0,\n}) {\n  const dispatch = useDispatch();\n  const [isFirstLoad, setIsFirstLoad] = useState(true);\n  const [isValid, setIsValid] = useState(true);\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const board = useSelector((state) => state.boards).find(\n    (board) => board.isActive\n  );\n\n  const columns = board.columns;\n  const col = columns.find((col, index) => index === prevColIndex);\n  const task = col ? col.tasks.find((task, index) => index === taskIndex) : [];\n  const [status, setStatus] = useState(columns[prevColIndex].name);\n  const [newColIndex, setNewColIndex] = useState(prevColIndex);\n  const [subtasks, setSubtasks] = useState([\n    { title: \"\", isCompleted: false, id: uuidv4() },\n    { title: \"\", isCompleted: false, id: uuidv4() },\n  ]);\n\n  const onChangeSubtasks = (id, newValue) => {\n    setSubtasks((prevState) => {\n      const newState = [...prevState];\n      const subtask = newState.find((subtask) => subtask.id === id);\n      subtask.title = newValue;\n      return newState;\n    });\n  };\n\n  const onChangeStatus = (e) => {\n    setStatus(e.target.value);\n    setNewColIndex(e.target.selectedIndex);\n  };\n\n  const validate = () => {\n    setIsValid(false);\n    if (!title.trim()) {\n      return false;\n    }\n    for (let i = 0; i < subtasks.length; i++) {\n      if (!subtasks[i].title.trim()) {\n        return false;\n      }\n    }\n    setIsValid(true);\n    return true;\n  };\n\n  if (type === \"edit\" && isFirstLoad) {\n    setSubtasks(\n      task.subtasks.map((subtask) => {\n        return { ...subtask, id: uuidv4() };\n      })\n    );\n    setTitle(task.title);\n    setDescription(task.description);\n    setIsFirstLoad(false);\n  }\n\n  const onDelete = (id) => {\n    setSubtasks((prevState) => prevState.filter((el) => el.id !== id));\n  };\n\n  const onSubmit = (type) => {\n    if (type === \"add\") {\n      dispatch(\n        boardsSlice.actions.addTask({\n          title,\n          description,\n          subtasks,\n          status,\n          newColIndex,\n        })\n      );\n    } else {\n      dispatch(\n        boardsSlice.actions.editTask({\n          title,\n          description,\n          subtasks,\n          status,\n          taskIndex,\n          prevColIndex,\n          newColIndex,\n        })\n      );\n    }\n  };\n\n  return (\n    <div\n      className={\n        device === \"mobile\"\n          ? \"  py-6 px-6 pb-40  absolute overflow-y-scroll  left-0 flex  right-0 bottom-[-100vh] top-0 dropdown \"\n          : \"  py-6 px-6 pb-40  absolute overflow-y-scroll  left-0 flex  right-0 bottom-0 top-0 dropdown \"\n      }\n      onClick={(e) => {\n        if (e.target !== e.currentTarget) {\n          return;\n        }\n        setIsAddTaskModalOpen(false);\n      }}\n    >\n      {/* Modal Section */}\n\n      <div\n        className=\" scrollbar-hide overflow-y-scroll max-h-[95vh]  my-auto  bg-white dark:bg-[#2b2c37] text-black dark:text-white font-bold\n       shadow-md shadow-[#364e7e1a] max-w-md mx-auto  w-full px-8  py-8 rounded-xl\"\n      >\n        <h3 className=\" text-lg \">\n          {type === \"edit\" ? \"Edit\" : \"Add New\"} Task\n        </h3>\n\n        {/* Task Name */}\n\n        <div className=\"mt-8 flex flex-col space-y-1\">\n          <label className=\"  text-sm dark:text-white text-gray-500\">\n            Task Name\n          </label>\n          <input\n            value={title}\n            onChange={(e) => setTitle(e.target.value)}\n            id=\"task-name-input\"\n            type=\"text\"\n            className=\" bg-transparent  px-4 py-2 outline-none focus:border-0 rounded-md text-sm  border-[0.5px] border-gray-600 focus:outline-[#635fc7] outline-1  ring-0  \"\n            placeholder=\" e.g Take coffee break\"\n          />\n        </div>\n\n        {/* Description */}\n        <div className=\"mt-8 flex flex-col space-y-1\">\n          <label className=\"  text-sm dark:text-white text-gray-500\">\n            Description\n          </label>\n          <textarea\n            value={description}\n            onChange={(e) => setDescription(e.target.value)}\n            id=\"task-description-input\"\n            className=\" bg-transparent outline-none min-h-[200px] focus:border-0 px-4 py-2 rounded-md text-sm  border-[0.5px] border-gray-600 focus:outline-[#635fc7] outline-[1px] \"\n            placeholder=\"e.g. It's always good to take a break. This \n            15 minute break will  recharge the batteries \n            a little.\"\n          />\n        </div>\n\n        {/* Subtasks */}\n\n        <div className=\"mt-8 flex flex-col space-y-3\">\n          <label className=\"  text-sm dark:text-white text-gray-500\">\n            Subtasks\n          </label>\n\n          {subtasks.map((subtask, index) => (\n            <div key={index} className=\" flex items-center w-full \">\n              <input\n                onChange={(e) => {\n                  onChangeSubtasks(subtask.id, e.target.value);\n                }}\n                type=\"text\"\n                value={subtask.title}\n                className=\" bg-transparent outline-none focus:border-0 flex-grow px-4 py-2 rounded-md text-sm  border-[0.5px] border-gray-600 focus:outline-[#635fc7] outline-[1px]  \"\n                placeholder=\" e.g Take coffee break\"\n              />\n              <img\n                src={crossIcon}\n                onClick={() => {\n                  onDelete(subtask.id);\n                }}\n                className=\" m-4 cursor-pointer \"\n              />\n            </div>\n          ))}\n\n          <button\n            className=\" w-full items-center dark:text-[#635fc7] dark:bg-white  text-white bg-[#635fc7] py-2 rounded-full \"\n            onClick={() => {\n              setSubtasks((state) => [\n                ...state,\n                { title: \"\", isCompleted: false, id: uuidv4() },\n              ]);\n            }}\n          >\n            + Add New Subtask\n          </button>\n        </div>\n\n        {/* current Status  */}\n        <div className=\"mt-8 flex flex-col space-y-3\">\n          <label className=\"  text-sm dark:text-white text-gray-500\">\n            Current Status\n          </label>\n          <select\n            value={status}\n            onChange={onChangeStatus}\n            className=\" select-status flex-grow px-4 py-2 rounded-md text-sm bg-transparent focus:border-0  border-[1px] border-gray-300 focus:outline-[#635fc7] outline-none\"\n          >\n            {columns.map((column, index) => (\n              <option key={index}>{column.name}</option>\n            ))}\n          </select>\n          <button\n            onClick={() => {\n              const isValid = validate();\n              if (isValid) {\n                onSubmit(type);\n                setIsAddTaskModalOpen(false);\n                type === \"edit\" && setIsTaskModalOpen(false);\n              }\n            }}\n            className=\" w-full items-center text-white bg-[#635fc7] py-2 rounded-full \"\n          >\n           {type === \"edit\" ? \" save edit\" : \"Create task\"}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default AddEditTaskModal;\n","/home/user/Fast Biz/Dashboard/Todo-Hub/src/modals/DeleteModal.js",[],[],"/home/user/Fast Biz/Dashboard/Todo-Hub/src/components/Task.js",[],[],"/home/user/Fast Biz/Dashboard/Todo-Hub/src/hooks/useDarkMode.js",["99"],[],"import React, { useEffect, useState } from 'react'\n\nfunction useDarkMode() {\n    \n  const [theme, setTheme] = useState(localStorage.theme)\n  const colorTheme = theme === \"dark\" ? \"light\" : \"dark\";\n\n  useEffect(() => {\n\n    const root = window.document.documentElement;\n    root.classList.remove(colorTheme);\n    root.classList.add(theme);\n    localStorage.setItem('theme', theme);\n\n}, [theme, colorTheme]);\n\nreturn [colorTheme, setTheme]\n\n}\n\nexport default useDarkMode","/home/user/Fast Biz/Dashboard/Todo-Hub/src/modals/TaskModal.js",[],[],"/home/user/Fast Biz/Dashboard/Todo-Hub/src/components/Subtask.js",[],[],{"ruleId":"100","severity":1,"message":"101","line":29,"column":6,"nodeType":"102","endLine":29,"endColumn":16,"suggestions":"103"},{"ruleId":"104","severity":1,"message":"105","line":9,"column":8,"nodeType":"106","messageId":"107","endLine":9,"endColumn":15},{"ruleId":"108","severity":1,"message":"109","line":55,"column":15,"nodeType":"110","endLine":55,"endColumn":71},{"ruleId":"104","severity":1,"message":"105","line":8,"column":8,"nodeType":"106","messageId":"107","endLine":8,"endColumn":15},{"ruleId":"104","severity":1,"message":"111","line":19,"column":10,"nodeType":"106","messageId":"107","endLine":19,"endColumn":26},{"ruleId":"104","severity":1,"message":"112","line":19,"column":28,"nodeType":"106","messageId":"107","endLine":19,"endColumn":47},{"ruleId":"108","severity":1,"message":"109","line":67,"column":23,"nodeType":"110","endLine":67,"endColumn":79},{"ruleId":"104","severity":1,"message":"113","line":17,"column":10,"nodeType":"106","messageId":"107","endLine":17,"endColumn":17},{"ruleId":"108","severity":1,"message":"109","line":177,"column":15,"nodeType":"110","endLine":183,"endColumn":17},{"ruleId":"104","severity":1,"message":"114","line":1,"column":8,"nodeType":"106","messageId":"107","endLine":1,"endColumn":13},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'colors'. Either include it or remove the dependency array.","ArrayExpression",["115"],"no-unused-vars","'elipsis' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'isBoardModalOpen' is assigned a value but never used.","'setIsBoardModalOpen' is assigned a value but never used.","'isValid' is assigned a value but never used.","'React' is defined but never used.",{"desc":"116","fix":"117"},"Update the dependencies array to be: [colors, dispatch]",{"range":"118","text":"119"},[777,787],"[colors, dispatch]"]