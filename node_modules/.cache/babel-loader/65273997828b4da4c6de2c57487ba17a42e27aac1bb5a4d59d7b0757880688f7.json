{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport data from \"../data.json\";\nconst boardsSlice = createSlice({\n  name: \"boards\",\n  initialState: data.boards,\n  reducers: {\n    /*Adding a new board*/\n    addBoard: (state, action) => {\n      const isActive = state.length > 0 ? false : true;\n      const payload = action.payload;\n      const board = {\n        name: payload.name,\n        isActive,\n        columns: []\n      };\n      board.columns = payload.newColumns;\n      state.push(board);\n    },\n    editBoard: (state, action) => {\n      const payload = action.payload;\n      const board = state.find(board => board.isActive);\n      board.name = payload.name;\n      board.columns = payload.newColumns;\n    },\n    /*Deleting an existing board*/\n\n    /**   */\n    setBoardActive: (state, action) => {\n      state.map((board, index) => {\n        index === action.payload.index ? board.isActive = true : board.isActive = false;\n        return board;\n      });\n    },\n    /*Adding a new board*/\n    addTask: (state, action) => {\n      const {\n        title,\n        status,\n        description,\n        subtasks,\n        newColIndex\n      } = action.payload;\n      const task = {\n        title,\n        description,\n        subtasks,\n        status\n      };\n      const board = state.find(board => board.isActive);\n      const column = board.columns.find((col, index) => index === newColIndex);\n      column.tasks.push(task);\n    },\n    /**Editing an existing task */\n    editTask: (state, action) => {\n      const {\n        title,\n        status,\n        description,\n        subtasks,\n        prevColIndex,\n        newColIndex,\n        taskIndex\n      } = action.payload;\n      const board = state.find(board => board.isActive);\n      const column = board.columns.find((col, index) => index === prevColIndex);\n      const task = column.tasks.find((task, index) => index === taskIndex);\n      task.title = title;\n      task.status = status;\n      task.description = description;\n      task.subtasks = subtasks;\n      if (prevColIndex === newColIndex) return;\n      column.tasks = column.tasks.filter((task, index) => index !== taskIndex);\n      const newCol = board.columns.find((col, index) => index === newColIndex);\n      newCol.tasks.push(task);\n    },\n    /**Dragging an existing task from column to column */\n    dragTask: (state, action) => {\n      const {\n        colIndex,\n        prevColIndex,\n        taskIndex\n      } = action.payload;\n      const board = state.find(board => board.isActive);\n      const prevCol = board.columns.find((col, i) => i === prevColIndex);\n      const task = prevCol.tasks.splice(taskIndex, 1)[0];\n      board.columns.find((col, i) => i === colIndex).tasks.push(task);\n    },\n    /**Completing a sub-task in an existing task */\n    setSubtaskCompleted: (state, action) => {\n      const payload = action.payload;\n      const board = state.find(board => board.isActive);\n      const col = board.columns.find((col, i) => i === payload.colIndex);\n      const task = col.tasks.find((task, i) => i === payload.taskIndex);\n      const subtask = task.subtasks.find((subtask, i) => i === payload.index);\n      subtask.isCompleted = !subtask.isCompleted;\n    },\n    /**Changing the status in an existing task */\n    setTaskStatus: (state, action) => {\n      const payload = action.payload;\n      const board = state.find(board => board.isActive);\n      const columns = board.columns;\n      const col = columns.find((col, i) => i === payload.colIndex);\n      if (payload.colIndex === payload.newColIndex) return;\n      const task = col.tasks.find((task, i) => i === payload.taskIndex);\n      task.status = payload.status;\n      col.tasks = col.tasks.filter((task, i) => i !== payload.taskIndex);\n      const newCol = columns.find((col, i) => i === payload.newColIndex);\n      newCol.tasks.push(task);\n    },\n    /**Deleting an existing task */\n    deleteTask: (state, action) => {\n      const payload = action.payload;\n      const board = state.find(board => board.isActive);\n      const col = board.columns.find((col, i) => i === payload.colIndex);\n      col.tasks = col.tasks.filter((task, i) => i !== payload.taskIndex);\n    }\n  }\n});\nexport default boardsSlice;","map":{"version":3,"names":["createSlice","data","boardsSlice","name","initialState","boards","reducers","addBoard","state","action","isActive","length","payload","board","columns","newColumns","push","editBoard","find","setBoardActive","map","index","addTask","title","status","description","subtasks","newColIndex","task","column","col","tasks","editTask","prevColIndex","taskIndex","filter","newCol","dragTask","colIndex","prevCol","i","splice","setSubtaskCompleted","subtask","isCompleted","setTaskStatus","deleteTask"],"sources":["/home/user/Fast Biz/Dashboard/Todo-Hub/src/redux/boardsSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport data from \"../data.json\";\n\nconst boardsSlice = createSlice({\n  name: \"boards\",\n  initialState: data.boards,\n  reducers: {\n    /*Adding a new board*/\n    addBoard: (state, action) => {\n      const isActive = state.length > 0 ? false : true;\n      const payload = action.payload;\n      const board = {\n        name: payload.name,\n        isActive,\n        columns: [],\n      };\n      board.columns = payload.newColumns;\n      state.push(board);\n    },\n    \n    editBoard: (state, action) => {\n      const payload = action.payload;\n      const board = state.find((board) => board.isActive);\n      board.name = payload.name;\n      board.columns = payload.newColumns;\n    },\n    /*Deleting an existing board*/\n   \n        /**   */\n    setBoardActive: (state, action) => {\n      state.map((board, index) => {\n        index === action.payload.index\n          ? (board.isActive = true)\n          : (board.isActive = false);\n        return board;\n      });\n    },\n    /*Adding a new board*/\n    addTask: (state, action) => {\n      const { title, status, description, subtasks, newColIndex } =\n        action.payload;\n      const task = { title, description, subtasks, status };\n      const board = state.find((board) => board.isActive);\n      const column = board.columns.find((col, index) => index === newColIndex);\n      column.tasks.push(task);\n    },\n    /**Editing an existing task */\n    editTask: (state, action) => {\n      const {\n        title,\n        status,\n        description,\n        subtasks,\n        prevColIndex,\n        newColIndex,\n        taskIndex,\n      } = action.payload;\n      const board = state.find((board) => board.isActive);\n      const column = board.columns.find((col, index) => index === prevColIndex);\n      const task = column.tasks.find((task, index) => index === taskIndex);\n      task.title = title;\n      task.status = status;\n      task.description = description;\n      task.subtasks = subtasks;\n      if (prevColIndex === newColIndex) return;\n      column.tasks = column.tasks.filter((task, index) => index !== taskIndex);\n      const newCol = board.columns.find((col, index) => index === newColIndex);\n      newCol.tasks.push(task);\n    },\n    /**Dragging an existing task from column to column */\n    dragTask: (state, action) => {\n      const { colIndex, prevColIndex, taskIndex } = action.payload;\n      const board = state.find((board) => board.isActive);\n      const prevCol = board.columns.find((col, i) => i === prevColIndex);\n      const task = prevCol.tasks.splice(taskIndex, 1)[0];\n      board.columns.find((col, i) => i === colIndex).tasks.push(task);\n    },\n        /**Completing a sub-task in an existing task */\n    setSubtaskCompleted: (state, action) => {\n      const payload = action.payload;\n      const board = state.find((board) => board.isActive);\n      const col = board.columns.find((col, i) => i === payload.colIndex);\n      const task = col.tasks.find((task, i) => i === payload.taskIndex);\n      const subtask = task.subtasks.find((subtask, i) => i === payload.index);\n      subtask.isCompleted = !subtask.isCompleted;\n    },\n        /**Changing the status in an existing task */\n    setTaskStatus: (state, action) => {\n      const payload = action.payload;\n      const board = state.find((board) => board.isActive);\n      const columns = board.columns;\n      const col = columns.find((col, i) => i === payload.colIndex);\n      if (payload.colIndex === payload.newColIndex) return;\n      const task = col.tasks.find((task, i) => i === payload.taskIndex);\n      task.status = payload.status;\n      col.tasks = col.tasks.filter((task, i) => i !== payload.taskIndex);\n      const newCol = columns.find((col, i) => i === payload.newColIndex);\n      newCol.tasks.push(task);\n    },\n        /**Deleting an existing task */\n    deleteTask: (state, action) => {\n      const payload = action.payload;\n      const board = state.find((board) => board.isActive);\n      const col = board.columns.find((col, i) => i === payload.colIndex);\n      col.tasks = col.tasks.filter((task, i) => i !== payload.taskIndex);\n    },\n  },\n});\n\nexport default boardsSlice;\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,IAAI,MAAM,cAAc;AAE/B,MAAMC,WAAW,GAAGF,WAAW,CAAC;EAC9BG,IAAI,EAAE,QAAQ;EACdC,YAAY,EAAEH,IAAI,CAACI,MAAM;EACzBC,QAAQ,EAAE;IACR;IACAC,QAAQ,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC3B,MAAMC,QAAQ,GAAGF,KAAK,CAACG,MAAM,GAAG,CAAC,GAAG,KAAK,GAAG,IAAI;MAChD,MAAMC,OAAO,GAAGH,MAAM,CAACG,OAAO;MAC9B,MAAMC,KAAK,GAAG;QACZV,IAAI,EAAES,OAAO,CAACT,IAAI;QAClBO,QAAQ;QACRI,OAAO,EAAE;MACX,CAAC;MACDD,KAAK,CAACC,OAAO,GAAGF,OAAO,CAACG,UAAU;MAClCP,KAAK,CAACQ,IAAI,CAACH,KAAK,CAAC;IACnB,CAAC;IAEDI,SAAS,EAAEA,CAACT,KAAK,EAAEC,MAAM,KAAK;MAC5B,MAAMG,OAAO,GAAGH,MAAM,CAACG,OAAO;MAC9B,MAAMC,KAAK,GAAGL,KAAK,CAACU,IAAI,CAAEL,KAAK,IAAKA,KAAK,CAACH,QAAQ,CAAC;MACnDG,KAAK,CAACV,IAAI,GAAGS,OAAO,CAACT,IAAI;MACzBU,KAAK,CAACC,OAAO,GAAGF,OAAO,CAACG,UAAU;IACpC,CAAC;IACD;;IAEI;IACJI,cAAc,EAAEA,CAACX,KAAK,EAAEC,MAAM,KAAK;MACjCD,KAAK,CAACY,GAAG,CAAC,CAACP,KAAK,EAAEQ,KAAK,KAAK;QAC1BA,KAAK,KAAKZ,MAAM,CAACG,OAAO,CAACS,KAAK,GACzBR,KAAK,CAACH,QAAQ,GAAG,IAAI,GACrBG,KAAK,CAACH,QAAQ,GAAG,KAAM;QAC5B,OAAOG,KAAK;MACd,CAAC,CAAC;IACJ,CAAC;IACD;IACAS,OAAO,EAAEA,CAACd,KAAK,EAAEC,MAAM,KAAK;MAC1B,MAAM;QAAEc,KAAK;QAAEC,MAAM;QAAEC,WAAW;QAAEC,QAAQ;QAAEC;MAAY,CAAC,GACzDlB,MAAM,CAACG,OAAO;MAChB,MAAMgB,IAAI,GAAG;QAAEL,KAAK;QAAEE,WAAW;QAAEC,QAAQ;QAAEF;MAAO,CAAC;MACrD,MAAMX,KAAK,GAAGL,KAAK,CAACU,IAAI,CAAEL,KAAK,IAAKA,KAAK,CAACH,QAAQ,CAAC;MACnD,MAAMmB,MAAM,GAAGhB,KAAK,CAACC,OAAO,CAACI,IAAI,CAAC,CAACY,GAAG,EAAET,KAAK,KAAKA,KAAK,KAAKM,WAAW,CAAC;MACxEE,MAAM,CAACE,KAAK,CAACf,IAAI,CAACY,IAAI,CAAC;IACzB,CAAC;IACD;IACAI,QAAQ,EAAEA,CAACxB,KAAK,EAAEC,MAAM,KAAK;MAC3B,MAAM;QACJc,KAAK;QACLC,MAAM;QACNC,WAAW;QACXC,QAAQ;QACRO,YAAY;QACZN,WAAW;QACXO;MACF,CAAC,GAAGzB,MAAM,CAACG,OAAO;MAClB,MAAMC,KAAK,GAAGL,KAAK,CAACU,IAAI,CAAEL,KAAK,IAAKA,KAAK,CAACH,QAAQ,CAAC;MACnD,MAAMmB,MAAM,GAAGhB,KAAK,CAACC,OAAO,CAACI,IAAI,CAAC,CAACY,GAAG,EAAET,KAAK,KAAKA,KAAK,KAAKY,YAAY,CAAC;MACzE,MAAML,IAAI,GAAGC,MAAM,CAACE,KAAK,CAACb,IAAI,CAAC,CAACU,IAAI,EAAEP,KAAK,KAAKA,KAAK,KAAKa,SAAS,CAAC;MACpEN,IAAI,CAACL,KAAK,GAAGA,KAAK;MAClBK,IAAI,CAACJ,MAAM,GAAGA,MAAM;MACpBI,IAAI,CAACH,WAAW,GAAGA,WAAW;MAC9BG,IAAI,CAACF,QAAQ,GAAGA,QAAQ;MACxB,IAAIO,YAAY,KAAKN,WAAW,EAAE;MAClCE,MAAM,CAACE,KAAK,GAAGF,MAAM,CAACE,KAAK,CAACI,MAAM,CAAC,CAACP,IAAI,EAAEP,KAAK,KAAKA,KAAK,KAAKa,SAAS,CAAC;MACxE,MAAME,MAAM,GAAGvB,KAAK,CAACC,OAAO,CAACI,IAAI,CAAC,CAACY,GAAG,EAAET,KAAK,KAAKA,KAAK,KAAKM,WAAW,CAAC;MACxES,MAAM,CAACL,KAAK,CAACf,IAAI,CAACY,IAAI,CAAC;IACzB,CAAC;IACD;IACAS,QAAQ,EAAEA,CAAC7B,KAAK,EAAEC,MAAM,KAAK;MAC3B,MAAM;QAAE6B,QAAQ;QAAEL,YAAY;QAAEC;MAAU,CAAC,GAAGzB,MAAM,CAACG,OAAO;MAC5D,MAAMC,KAAK,GAAGL,KAAK,CAACU,IAAI,CAAEL,KAAK,IAAKA,KAAK,CAACH,QAAQ,CAAC;MACnD,MAAM6B,OAAO,GAAG1B,KAAK,CAACC,OAAO,CAACI,IAAI,CAAC,CAACY,GAAG,EAAEU,CAAC,KAAKA,CAAC,KAAKP,YAAY,CAAC;MAClE,MAAML,IAAI,GAAGW,OAAO,CAACR,KAAK,CAACU,MAAM,CAACP,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;MAClDrB,KAAK,CAACC,OAAO,CAACI,IAAI,CAAC,CAACY,GAAG,EAAEU,CAAC,KAAKA,CAAC,KAAKF,QAAQ,CAAC,CAACP,KAAK,CAACf,IAAI,CAACY,IAAI,CAAC;IACjE,CAAC;IACG;IACJc,mBAAmB,EAAEA,CAAClC,KAAK,EAAEC,MAAM,KAAK;MACtC,MAAMG,OAAO,GAAGH,MAAM,CAACG,OAAO;MAC9B,MAAMC,KAAK,GAAGL,KAAK,CAACU,IAAI,CAAEL,KAAK,IAAKA,KAAK,CAACH,QAAQ,CAAC;MACnD,MAAMoB,GAAG,GAAGjB,KAAK,CAACC,OAAO,CAACI,IAAI,CAAC,CAACY,GAAG,EAAEU,CAAC,KAAKA,CAAC,KAAK5B,OAAO,CAAC0B,QAAQ,CAAC;MAClE,MAAMV,IAAI,GAAGE,GAAG,CAACC,KAAK,CAACb,IAAI,CAAC,CAACU,IAAI,EAAEY,CAAC,KAAKA,CAAC,KAAK5B,OAAO,CAACsB,SAAS,CAAC;MACjE,MAAMS,OAAO,GAAGf,IAAI,CAACF,QAAQ,CAACR,IAAI,CAAC,CAACyB,OAAO,EAAEH,CAAC,KAAKA,CAAC,KAAK5B,OAAO,CAACS,KAAK,CAAC;MACvEsB,OAAO,CAACC,WAAW,GAAG,CAACD,OAAO,CAACC,WAAW;IAC5C,CAAC;IACG;IACJC,aAAa,EAAEA,CAACrC,KAAK,EAAEC,MAAM,KAAK;MAChC,MAAMG,OAAO,GAAGH,MAAM,CAACG,OAAO;MAC9B,MAAMC,KAAK,GAAGL,KAAK,CAACU,IAAI,CAAEL,KAAK,IAAKA,KAAK,CAACH,QAAQ,CAAC;MACnD,MAAMI,OAAO,GAAGD,KAAK,CAACC,OAAO;MAC7B,MAAMgB,GAAG,GAAGhB,OAAO,CAACI,IAAI,CAAC,CAACY,GAAG,EAAEU,CAAC,KAAKA,CAAC,KAAK5B,OAAO,CAAC0B,QAAQ,CAAC;MAC5D,IAAI1B,OAAO,CAAC0B,QAAQ,KAAK1B,OAAO,CAACe,WAAW,EAAE;MAC9C,MAAMC,IAAI,GAAGE,GAAG,CAACC,KAAK,CAACb,IAAI,CAAC,CAACU,IAAI,EAAEY,CAAC,KAAKA,CAAC,KAAK5B,OAAO,CAACsB,SAAS,CAAC;MACjEN,IAAI,CAACJ,MAAM,GAAGZ,OAAO,CAACY,MAAM;MAC5BM,GAAG,CAACC,KAAK,GAAGD,GAAG,CAACC,KAAK,CAACI,MAAM,CAAC,CAACP,IAAI,EAAEY,CAAC,KAAKA,CAAC,KAAK5B,OAAO,CAACsB,SAAS,CAAC;MAClE,MAAME,MAAM,GAAGtB,OAAO,CAACI,IAAI,CAAC,CAACY,GAAG,EAAEU,CAAC,KAAKA,CAAC,KAAK5B,OAAO,CAACe,WAAW,CAAC;MAClES,MAAM,CAACL,KAAK,CAACf,IAAI,CAACY,IAAI,CAAC;IACzB,CAAC;IACG;IACJkB,UAAU,EAAEA,CAACtC,KAAK,EAAEC,MAAM,KAAK;MAC7B,MAAMG,OAAO,GAAGH,MAAM,CAACG,OAAO;MAC9B,MAAMC,KAAK,GAAGL,KAAK,CAACU,IAAI,CAAEL,KAAK,IAAKA,KAAK,CAACH,QAAQ,CAAC;MACnD,MAAMoB,GAAG,GAAGjB,KAAK,CAACC,OAAO,CAACI,IAAI,CAAC,CAACY,GAAG,EAAEU,CAAC,KAAKA,CAAC,KAAK5B,OAAO,CAAC0B,QAAQ,CAAC;MAClER,GAAG,CAACC,KAAK,GAAGD,GAAG,CAACC,KAAK,CAACI,MAAM,CAAC,CAACP,IAAI,EAAEY,CAAC,KAAKA,CAAC,KAAK5B,OAAO,CAACsB,SAAS,CAAC;IACpE;EACF;AACF,CAAC,CAAC;AAEF,eAAehC,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}